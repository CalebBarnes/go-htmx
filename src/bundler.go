package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"slices"
	"time"

	"github.com/evanw/esbuild/pkg/api"
	"github.com/fatih/color"
)

func bundleAssets() {
	start := time.Now()

	// getGoogleFont("https://fonts.googleapis.com/css2?family=Inter&display=swap")

	postCSS("src/styles/main.css", "tmp/postcss/bundled.css")

	// esbuild -> bundles ts and any css that was imported in ts
	result := api.Build(api.BuildOptions{
		EntryPoints:       []string{"./src/templates/*.ts"},
		Bundle:            true,
		Outdir:            ".generated/esbuild/templates",
		Write:             true,
		Target:            api.ESNext,
		MinifySyntax:      true,
		MinifyWhitespace:  true,
		MinifyIdentifiers: false,
		Sourcemap:         api.SourceMapLinked,
	})
	if len(result.Errors) > 0 {
		for _, err := range result.Errors {
			bundlerLogger(color.RedString("Error bundleAssets:"))
			os.Stderr.WriteString(err.Text)
		}
		return
	}

	pruneOldFiles(result)

	cmdStr := "cat ./tmp/postcss/bundled.css > ./tmp/bundled.css"
	if fileExists(".generated/esbuild/templates/app.css") {
		cmdStr = "cat .generated/esbuild/templates/app.css ./tmp/postcss/bundled.css > ./tmp/bundled.css"
	}
	// combine postcss and esbuild css with cat command
	cmd := exec.Command("bash", "-c", cmdStr)
	var stderr bytes.Buffer
	cmd.Stderr = &stderr
	cmdErr := cmd.Run()
	if cmdErr != nil {
		color.Red(fmt.Sprint(cmdErr) + ": " + stderr.String())
		return
	}

	// minify the bundled css
	result = api.Build(api.BuildOptions{
		EntryPoints:       []string{"tmp/bundled.css"},
		Bundle:            true,
		Outfile:           ".generated/css/main.css",
		Write:             true,
		Target:            api.ES2015,
		MinifySyntax:      true,
		MinifyWhitespace:  true,
		MinifyIdentifiers: true,
	})

	if len(result.Errors) > 0 {
		bundlerLogger(color.RedString("Error esbuildCSS:"))
		os.Stderr.WriteString(result.Errors[0].Text)
	}

	bundlerLogger(fmt.Sprintf("assets bundled in %0.2fms", time.Since(start).Seconds()*1000))
}

func postCSS(inputPath string, outputPath string) {
	cmd := exec.Command(
		"./node_modules/.bin/postcss",
		inputPath,
		"-o", outputPath,
		"--config", "postcss.config.js")

	var stderr bytes.Buffer
	cmd.Stderr = &stderr
	cmdErr := cmd.Run()
	if cmdErr != nil {
		color.Red(fmt.Sprint(cmdErr) + ": " + stderr.String())
		return
	}
}

func getCwd() string {
	cwd, err := os.Getwd()
	if err != nil {
		bundlerLogger(color.RedString("Error getting current working directory:"))
		os.Stderr.WriteString(err.Error())
		return ""
	}
	return cwd
}

// remove any files from .generated/esbuild/templates that were not generated by esbuild
func pruneOldFiles(esbuildResult api.BuildResult) {
	cwd := getCwd()
	generatedFilePaths := []string{}
	// log the esbuilt api.BuildResult
	if len(esbuildResult.OutputFiles) > 0 {
		for _, val := range esbuildResult.OutputFiles {
			generatedFilePaths = append(generatedFilePaths, val.Path)
			// bundlerLogger(fmt.Sprintf("esbuild: %s", val.Path))
		}
	}

	fileInfos, err := os.ReadDir(".generated/esbuild/templates")
	if err != nil {
		// bundlerLogger(color.RedString("Error reading directory:"))
		os.Stderr.WriteString(err.Error())
		return
	}
	for _, fileInfo := range fileInfos {
		filePath := cwd + "/.generated/esbuild/templates/" + fileInfo.Name()

		if !slices.Contains(generatedFilePaths, filePath) {
			err := os.Remove(filePath)
			if err != nil {
				bundlerLogger(color.RedString("Error removing file:"))
				os.Stderr.WriteString(err.Error())
				return
			}
			// bundlerLogger(fmt.Sprintf("removed file: %s", filePath))
		}
		// bundlerLogger(fmt.Sprintf("current existing files: %s", filePath))
	}
}
